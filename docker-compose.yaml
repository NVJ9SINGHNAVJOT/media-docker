version: '3.8'

volumes:
  # NOTE: Do not rename or change the volume names, this will cause breaking changes.
  media-docker-files-volume:
    name: media-docker-files-volume
  media-docker-upload-volume:
    name: media-docker-upload-volume
  media-docker-kafka-0_data:
    name: media-docker-kafka-0_data
  media-docker-kafka-1_data:
    name: media-docker-kafka-1_data
  media-docker-kafka-2_data:
    name: media-docker-kafka-2_data

networks:
  # NOTE: In production use nginx-proxy internal network
  proxy:
    external: true
  media-docker-proxy:

services:
  media-docker-client:
    build:
      context: .
      dockerfile: ./internal/media-docker-client/Dockerfile
    container_name: media-docker-client
    volumes:
      # Keep the volume mapping unchanged to prevent breaking changes.
      - media-docker-files-volume:/app/media_docker_files:ro
    networks:
      - proxy
    ports: [7000:7000] # Disable this in production
    env_file: .env.client

  media-docker-server:
    build:
      context: .
      dockerfile: ./internal/media-docker-server/Dockerfile
    container_name: media-docker-server
    volumes:
      # Keep the volume mapping unchanged to prevent breaking changes.
      - media-docker-upload-volume:/app/uploadStorage:rw
      - media-docker-files-volume:/app/media_docker_files:ro
    networks:
      - proxy
      - media-docker-proxy
    ports: [7007:7007] # Disable this in production
    env_file: .env.server
    depends_on:
      - media-docker-kafka-consumer
    stop_grace_period: 90s
  
  media-docker-kafka-consumer:
    build:
      context: .
      dockerfile: ./internal/media-docker-kafka-consumer/Dockerfile
    container_name: media-docker-kafka-consumer
    volumes:
      # Keep the volume mapping unchanged to prevent breaking changes.
      - media-docker-upload-volume:/app/uploadStorage:rw
      - media-docker-files-volume:/app/media_docker_files:rw
    networks:
      - media-docker-proxy
    env_file: .env.consumer
    depends_on:
      - media-docker-kafka-0
    stop_grace_period: 30s
    
  media-docker-kafka-0:
    image: docker.io/bitnami/kafka:3.8.0
    container_name: media-docker-kafka-0
    volumes:
      - media-docker-kafka-0_data:/bitnami/kafka
    networks:
      - media-docker-proxy
    restart: unless-stopped
    environment:
      # KRaft settings for node 0
      - KAFKA_KRAFT_CLUSTER_ID=gZpsEhujeRQwA249Kx5KKg
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@media-docker-kafka-0:9093,1@media-docker-kafka-1:9093,2@media-docker-kafka-2:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://media-docker-kafka-0:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
      # Clustering settings
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
    depends_on:
      - media-docker-kafka-1

  media-docker-kafka-1:
    image: docker.io/bitnami/kafka:3.8.0
    container_name: media-docker-kafka-1
    volumes:
      - media-docker-kafka-1_data:/bitnami/kafka
    networks:
      - media-docker-proxy
    restart: unless-stopped
    environment:
      # KRaft settings for node 1
      - KAFKA_KRAFT_CLUSTER_ID=gZpsEhujeRQwA249Kx5KKg
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@media-docker-kafka-0:9093,1@media-docker-kafka-1:9093,2@media-docker-kafka-2:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://media-docker-kafka-1:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
      # Clustering settings
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
    depends_on:
      - media-docker-kafka-2

  media-docker-kafka-2:
    image: docker.io/bitnami/kafka:3.8.0
    container_name: media-docker-kafka-2
    volumes:
      - media-docker-kafka-2_data:/bitnami/kafka    
    networks:
      - media-docker-proxy
    restart: unless-stopped
    environment:
      # KRaft settings for node 2
      - KAFKA_KRAFT_CLUSTER_ID=gZpsEhujeRQwA249Kx5KKg
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@media-docker-kafka-0:9093,1@media-docker-kafka-1:9093,2@media-docker-kafka-2:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://media-docker-kafka-2:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
      # Clustering settings
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
