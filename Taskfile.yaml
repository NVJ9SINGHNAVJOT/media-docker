version: "3"

interval: 500ms

tasks:
  default:
    desc: List all tasks.
    cmd: task -l

  i:
    desc: Fetch dependencies and confirm they are valid.
    cmds:
      - go mod download
      - go mod verify

  tidy:
    desc: Clean up `go.mod` and `go.sum` files using `go mod tidy`.
    cmds:
      - go mod tidy

  build:
    desc: Compile the project into the "dist" directory.
    cmds:
      - cd cmd/media-docker-server && go build -o ../../dist/server-main main.go
      - cd cmd/media-docker-client && go build -o ../../dist/client-main main.go
      - cd cmd/media-docker-kafka-consumer && go build -o ../../dist/consumer-main main.go

  proxy:
    desc: Set up a proxy network for Docker.
    cmd:
      # Windows (Git Bash)
      cd task_scripts && bash docker_proxy_network.sh

  dev-kafka-topics:
    desc: Create Kafka topics for the development container using the `this_create_kafka_topics.sh` script.
    cmd:
      # Windows (Git Bash)
      cd task_scripts && bash this_create_kafka_topics.sh "media-docker-kafka-development" "1"

  dev-kafka:
    desc: Launch the development Kafka container with the proxy network.
    cmds:
      - task: proxy
      # Windows (Git Bash)
      - cd task_scripts && bash create_kafka_development_container.sh "media-docker-kafka-development" "proxy"

  scripts:
    desc: Download scripts from the GitHub repository at "https://github.com/NVJ9SINGHNAVJOT/stacks".
    cmd:
      # Windows (Git Bash)
      bash ./clone_files.sh

  client:
    desc: Execute the `main.go` file for the client located in the `cmd` folder.
    cmds:
      - go run cmd/media-docker-client/main.go

  server:
    desc: Execute the `main.go` file for the server located in the `cmd` folder.
    cmds:
      - go run cmd/media-docker-server/main.go

  consumer:
    desc: Execute the `main.go` file for the Kafka consumer located in the `cmd` folder.
    cmds:
      - go run cmd/media-docker-kafka-consumer/main.go

  k-cluster:
    desc: Display information about the Kafka broker cluster.
    cmds:
      - docker-compose exec media-docker-kafka-0 kafka-metadata-quorum.sh --bootstrap-server media-docker-kafka-0:9092 describe --status
      - docker-compose exec media-docker-kafka-0 kafka-metadata-quorum.sh --bootstrap-server media-docker-kafka-0:9092 describe --replication

  kafka-topics:
    desc: Create Kafka topics for the production cluster using default partition values (modifiable as needed before execution).
    env:
      VIDEO_PARTITIONS: 100
      VIDEORESPONSE_PARTITIONS: 50
      VIDEORESOLUTIONS_PARTITIONS: 100
      VIDEORESOLUTIONSRESPONSE_PARTITIONS: 50
      IMAGE_PARTITIONS: 100
      IMAGERESPONSE_PARTITIONS: 50
      AUDIO_PARTITIONS: 50
      AUDIORESPONSE_PARTITIONS: 25
      DELETEFILE_PARTITIONS: 20
    cmds:
      # Windows (Git Bash)
      - cd task_scripts && bash this_create_kafka_topics.sh "media-docker-kafka-0" "3"

  delete-topics:
    desc: Delete Kafka topics from brokers cluster.
    cmds:
      - cd task_scripts && bash this_delete_kafka_topics.sh "media-docker-kafka-0"

  kafka-cluster:
    desc: Initialize the Kafka broker services cluster for production.
    cmds:
      - docker compose up -d media-docker-kafka-0

  compose-up:
    desc: Start all media-docker containers for production.
    cmds:
      - task: proxy
      - task: kafka-cluster # Launch Kafka brokers in order
      - sleep 10 # Wait 10 seconds for brokers to fully initialize
      - task: kafka-topics # Create Kafka topics once brokers are running
      - docker compose up -d media-docker-server # Automatically starts the consumer and Kafka services as per dependencies
      - docker compose up -d media-docker-client # Launch the client as the final step

  compose-down:
    desc: Bring down all media-docker containers.
    cmds:
      - docker compose down
